

int main(int argc, char *argv[]) {

    jb_log_set_file("build/josh.log");

    argv = josh_parse_arguments(argc, argv);
    argc = jb_string_array_count(argv);

    if (argc >= 2 && strcmp(argv[1], "toolchain") == 0) {

        JBVector(char *) args = {0};

        for (int i = 2; i < argc; i++)
            JBVectorPush(&args, argv[i]);

        JBVectorPush(&args, NULL);

        josh_build("tools/toolchain_builder.josh", args.data);
        return 0;
    }

    const char **sources = JB_STRING_ARRAY("src/main.c");
    const char **cflags = JB_STRING_ARRAY("-Wall", "-Itools");

    {
        jb_generate_embed("src/josh_build.h", "src/josh_build_embed.h");
        jb_generate_embed("src/init_josh_build.c", "src/init_josh_build_embed.h");
        jb_generate_embed("src/init_src_main.c", "src/init_src_main_embed.h");
    }

    {
        JBExecutable josh = {"josh"};
        josh.sources = sources;
        josh.cflags = cflags;
        josh.build_folder = "build";
        jb_build_exe(&josh);
    }

    JBToolchain *toolchain = jb_find_toolchain(JB_ENUM(ARM64), JB_ENUM(Linux), JB_ENUM(GNU));
    if (toolchain != jb_native_toolchain()) {
        if(!toolchain) {
            printf("WARNING: no toolchain for arm64-linux-gnu; skipping build...\n");
        }
        else {
            // Cross build linux executable
            JBExecutable josh = {"josh_linux"};
            josh.sources = sources;
            josh.cflags = cflags;
            josh.build_folder = "build_linux";

            josh.toolchain = toolchain;
            jb_build_exe(&josh);
        }
    }
    else {
        printf("Host is running arm64-linux-gnu; skipping cross-build...\n");
    }

    remove("src/josh_build_embed.h");
    remove("src/init_josh_build_embed.h");
    remove("src/init_src_main_embed.h");
}
