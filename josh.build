
char *read_file(const char *path) {
    FILE *f = fopen(path, "rb");

    if (!f)
        return NULL;

    fseek(f, 0, SEEK_END);
    long len = ftell(f);
    fseek(f, 0, SEEK_SET);

    char *out = malloc(len + 1);

    size_t read = fread(out, 1, len, f);

    if (read != len)
        return NULL;

    out[len] = 0;

    return out;
}

// TODO should embed generation be part of the josh_build.h library?
void generate_embed(const char *input, const char *output) {
    char *text = read_file(input);

    JB_ASSERT(text, "could not read file: %s", input);

    FILE *out = fopen(output, "wb");

    while (*text) {
        fprintf(out, "0x%X", *text);
        text++;

        if (*text != 0)
            fprintf(out, ", ");
    }

    fputc('\n', out);

    fclose(out);
}

int main() {
    {
        generate_embed("src/josh_build.h", "src/josh_build_embed.h");
        generate_embed("src/init_josh_build.c", "src/init_josh_build_embed.h");
        generate_embed("src/init_src_main.c", "src/init_src_main_embed.h");
    }

    {
        JBExecutable josh = {"josh"};
        josh.sources = (const char *[]){"src/main.c", NULL};
        josh.build_folder = "build";
        jb_build(&josh);
    }

    JBToolchain *toolchain = jb_find_toolchain(JB_ENUM(ARM64), JB_ENUM(Linux), JB_ENUM(GNU));
    if (toolchain != jb_native_toolchain()) {
        if(!toolchain) {
            printf("WARNING: no toolchain for arm64-linux-gnu; skipping build...\n");
        }
        else {
            // Cross build linux executable
            JBExecutable josh = {"josh_linux"};
            josh.sources = (const char *[]){"src/main.c", NULL};
            josh.build_folder = "build";

            josh.toolchain = toolchain;
            jb_build(&josh);
        }
    }
    else {
        printf("Host is running arm64-linux-gnu; skipping cross-build...\n");
    }

    remove("src/josh_build_embed.h");
    remove("src/init_josh_build_embed.h");
    remove("src/init_src_main_embed.h");
}
