

int main() {
    {
        JBExecutable josh = {"embed"};
        josh.sources = (const char *[]){"src/embed.c", NULL};
        josh.build_folder = "build";
        josh.cflags = (const char *[]){ "-Wall", NULL };
        jb_build(&josh);

        JB_RUN_CMD("./build/embed", "src/josh_build.h", "src/josh_build_embed.h");
        JB_RUN_CMD("./build/embed", "src/init_josh_build.c", "src/init_josh_build_embed.h");
        JB_RUN_CMD("./build/embed", "src/init_src_main.c", "src/init_src_main_embed.h");

        remove("./build/embed");
    }

    {
        JBExecutable josh = {"josh"};
        josh.sources = (const char *[]){"src/main.c", NULL};
        josh.build_folder = "build";
        jb_build(&josh);
    }

    JBToolchain *toolchain = jb_find_toolchain(JB_ENUM(ARM64), JB_ENUM(Linux), JB_ENUM(GNU));
    if (toolchain != jb_native_toolchain()) {
        if(!toolchain) {
            printf("WARNING: no toolchain for arm64-linux-gnu; skipping build...\n");
        }
        else {
            // Cross build linux executable
            JBExecutable josh = {"josh_linux"};
            josh.sources = (const char *[]){"src/main.c", NULL};
            josh.build_folder = "build";

            josh.toolchain = toolchain;
            jb_build(&josh);
        }
    }
    else {
        printf("Host is running arm64-linux-gnu; skipping cross-build...\n");
    }

    remove("src/josh_build_embed.h");
    remove("src/init_josh_build_embed.h");
    remove("src/init_src_main_embed.h");
}
